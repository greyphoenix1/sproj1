{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahma\\\\Desktop\\\\Projects\\\\sProj1\\\\sproj1\\\\frontend\\\\src\\\\ImageTransfer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\nimport TopBar from 'TopBar';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:3000');\nfunction ImageTranfer() {\n  _s();\n  const fileInputRef = useRef();\n  useEffect(() => {\n    socket.on('receiveImage', data => {\n      const img = document.createElement('img');\n      img.src = URL.createObjectURL(new Blob([data]));\n      document.body.appendChild(img);\n    });\n  }, []);\n  const handleSendImage = () => {\n    const file = fileInputRef.current.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = e => {\n        const buffer = e.target.result;\n        socket.emit('sendImage', buffer);\n      };\n      reader.readAsArrayBuffer(file);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TopBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"background\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"upload\",\n        type: \"file\",\n        ref: fileInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"send\",\n        onClick: handleSendImage,\n        children: \"Send Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(ImageTranfer, \"BhiuRpY3omh2tGJhJEu7VxXBwPE=\");\n_c = ImageTranfer;\nexport default ImageTranfer;\nvar _c;\n$RefreshReg$(_c, \"ImageTranfer\");","map":{"version":3,"names":["React","useEffect","useRef","io","TopBar","jsxDEV","_jsxDEV","Fragment","_Fragment","socket","ImageTranfer","_s","fileInputRef","on","data","img","document","createElement","src","URL","createObjectURL","Blob","body","appendChild","handleSendImage","file","current","files","reader","FileReader","onload","e","buffer","target","result","emit","readAsArrayBuffer","children","fileName","_jsxFileName","lineNumber","columnNumber","className","type","ref","onClick","_c","$RefreshReg$"],"sources":["C:/Users/rahma/Desktop/Projects/sProj1/sproj1/frontend/src/ImageTransfer.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport io from 'socket.io-client';\r\nimport TopBar from 'TopBar'\r\n\r\nconst socket = io('http://localhost:3000');\r\n\r\nfunction ImageTranfer() {\r\n    const fileInputRef = useRef();\r\n\r\n    useEffect(() => {\r\n        socket.on('receiveImage', (data) => {\r\n            const img = document.createElement('img');\r\n            img.src = URL.createObjectURL(new Blob([data]));\r\n            document.body.appendChild(img);\r\n        });\r\n    }, []);\r\n\r\n    const handleSendImage = () => {\r\n        const file = fileInputRef.current.files[0];\r\n        if (file) {\r\n            const reader = new FileReader();\r\n            reader.onload = (e) => {\r\n                const buffer = e.target.result;\r\n                socket.emit('sendImage', buffer);\r\n            };\r\n            reader.readAsArrayBuffer(file);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <TopBar/>\r\n            <div className='background'>\r\n            <input className='upload' type=\"file\" ref={fileInputRef} />\r\n            <button className='send' onClick={handleSendImage}>Send Image</button>\r\n            </div>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default ImageTranfer;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAOC,EAAE,MAAM,kBAAkB;AACjC,OAAOC,MAAM,MAAM,QAAQ;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE3B,MAAMC,MAAM,GAAGN,EAAE,CAAC,uBAAuB,CAAC;AAE1C,SAASO,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAMC,YAAY,GAAGV,MAAM,CAAC,CAAC;EAE7BD,SAAS,CAAC,MAAM;IACZQ,MAAM,CAACI,EAAE,CAAC,cAAc,EAAGC,IAAI,IAAK;MAChC,MAAMC,GAAG,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;MACzCF,GAAG,CAACG,GAAG,GAAGC,GAAG,CAACC,eAAe,CAAC,IAAIC,IAAI,CAAC,CAACP,IAAI,CAAC,CAAC,CAAC;MAC/CE,QAAQ,CAACM,IAAI,CAACC,WAAW,CAACR,GAAG,CAAC;IAClC,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMS,eAAe,GAAGA,CAAA,KAAM;IAC1B,MAAMC,IAAI,GAAGb,YAAY,CAACc,OAAO,CAACC,KAAK,CAAC,CAAC,CAAC;IAC1C,IAAIF,IAAI,EAAE;MACN,MAAMG,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,MAAM,GAAIC,CAAC,IAAK;QACnB,MAAMC,MAAM,GAAGD,CAAC,CAACE,MAAM,CAACC,MAAM;QAC9BzB,MAAM,CAAC0B,IAAI,CAAC,WAAW,EAAEH,MAAM,CAAC;MACpC,CAAC;MACDJ,MAAM,CAACQ,iBAAiB,CAACX,IAAI,CAAC;IAClC;EACJ,CAAC;EAED,oBACInB,OAAA,CAAAE,SAAA;IAAA6B,QAAA,gBACI/B,OAAA,CAACF,MAAM;MAAAkC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACTnC,OAAA;MAAKoC,SAAS,EAAC,YAAY;MAAAL,QAAA,gBAC3B/B,OAAA;QAAOoC,SAAS,EAAC,QAAQ;QAACC,IAAI,EAAC,MAAM;QAACC,GAAG,EAAEhC;MAAa;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC3DnC,OAAA;QAAQoC,SAAS,EAAC,MAAM;QAACG,OAAO,EAAErB,eAAgB;QAAAa,QAAA,EAAC;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjE,CAAC;EAAA,eACR,CAAC;AAGX;AAAC9B,EAAA,CAjCQD,YAAY;AAAAoC,EAAA,GAAZpC,YAAY;AAmCrB,eAAeA,YAAY;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}